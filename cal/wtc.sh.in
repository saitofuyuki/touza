#!/bin/sh
# Maintainer: SAITO Fuyuki
# Time-stamp: <2021/01/07 12:11:45 fuyuki wtc.sh.in>

# Copyright (C) 2020, 2021
#           Japan Agency for Marine-Earth Science and Technology
# Licensed under the Apache License, Version 2.0
#   (https://www.apache.org/licenses/LICENSE-2.0)

this=$0

# generated by make
xnew=@XNEW@
xold=@XOLD@
xmat=@XMAT@
xils=@XILS@

# default
test x"$xnew" = x && xnew=./test_calendar_comp
test x"$xold" = x && xold=./test_calendar_trad
test x"$xmat" = x && xmat=./test_calendar_matsiro
test x"$xils" = x && xils=./test_calendar_ils

## usage
usage ()
{
  echo "$this - calendar-test wrapper"
  echo "Usage"
  echo "  $this [OPTIONS] TEST-ID"
  return 0
}

tstt=0 tstp=0
logd=.
while test $# -gt 0
do
  case $1 in
  -i) tstt=$2; shift;;
  -e) tstp=$2; shift;;
  -t) tstt=$2; tstp=$2; shift;;
  -l) logd=$2; shift;;
  -xn) xnew=$2; shift;;
  -xo) xold=$2; shift;;
  -xm) xmat=$2; shift;;
  -xi) xils=$2; shift;;
  -*) echo "$this: unknown argument $1"; usage >&2; exit 1;;
  *)  break;;
  esac
  shift
done

test $# -eq 0 && usage >&2 && exit 0

sysin=$(mktemp)
nres=$(mktemp)
ores=$(mktemp)
do_exit='rm -f $sysin $nres $ores; exit $err'

mkdir -p $logd || exit $?

trap "$do_exit" 0 1 2 3 15

chk_cmds ()
{
  for c in "$@"
  do
    test ! -x $c && echo "$this: Aborts. Cannot execute $c." && exit 1
  done
  return 0
}

chk_plan ()
{
  echo "$1..$2" ## plan
}
# ---------------------------------------- miroc
chk_miroc ()
{
  case $cal in
  auto*)    CAL='OAUTO=T,';;
  grego_i*) CAL='OGREGO=T, OIDEAL=T,';;
  grego_l*) CAL='OGREGO=T, OIDEAL=F,';;
  ideal*)   CAL='OIDEAL=T,';;
  *) echo "$this: Aborts. Unknown test $cal." >&2; exit 1;;
  esac
  case $cal in
  *.p) CAL="$CAL OPERPT=T, ";;
  esac

  tbgn=1 tend=9

  test $tstt -eq 0 && tstt=$tbgn
  test $tstp -eq 0 && tstp=$tend

  ncmd=$xnew; ocmd=$xold
  chk_cmds $ncmd $ocmd || return $?
  test -e "./$ncmd" && ncmd="./$ncmd"
  test -e "./$ocmd" && ocmd="./$ocmd"

  chk_plan ${tbgn} ${tend}
  for t in $(seq $tbgn $tend)
  do
    if test $t -lt $tstt -o $t -gt $tstp; then
      echo "ok $t # SKIP"
      continue
    fi
    case $t in
    7) echo "# test $t may take a long time";;
    9) echo "# test $t may take a loooong time";;
    esac
    echo " &NMCALN $CAL &END" > "$sysin"
    echo " &NMTEST KTEST=$t &END" >> "$sysin"
    nlog=$logd/x$cal.t$t.new
    olog=$logd/x$cal.t$t.old
    descr="succeed"
    time $ncmd < "$sysin" > "$nlog" 2>&1
    if chk new "$nlog" "$nres"; then :; else
      echo "not ok $t - $descr"
      continue
    fi
    time $ocmd < "$sysin" > "$olog" 2>&1
    if chk old "$olog" "$ores"; then :; else
      echo "not ok $t - $descr"
      continue
    fi

    if cmp "$ores" "$nres"; then
      descr="consistent"
      echo "ok $t - $descr"
    else
      descr="inconsistent"
      echo "not ok $t - $descr"
    fi
  done
  return 0
}

xtr_result ()
{
  src=$1 xtr=$2
  sed -n -e '/BEGIN TEST/,/END TEST/p' "$src" > "$xtr"
  test "$(wc -l < $xtr)" -le 2 && return 1
  return 0
}

chk_new ()
{
  err=0
  src=$1 xtr=$2
  grep --silent calendar_miroc "$src" > /dev/null 2>&1 || return 1
  return 0
}

chk_old ()
{
  err=0
  src=$1 xtr=$2
  grep --silent '@@@ ACALN:' "$src" > /dev/null 2>&1 || return 1
  return 0
}

chk ()
{
  tag=$1; shift
  if "chk_$tag" "$@"; then
    if xtr_result "$@"; then
      descr="($tag) succeed"
      err=0
    else
      descr="($tag) no result"
      err=2
    fi
  else
    descr="($tag) may fail at build"
    err=1
  fi
  return $err
}

# ---------------------------------------- matsiro
chk_matsiro ()
{
  err=0
  cmd=$xmat
  chk_cmds $cmd || return $?

  test -x ./$cmd && cmd=./$cmd

  tbgn=1 tend=4

  test $tstt -eq 0 && tstt=$tbgn
  test $tstp -eq 0 && tstp=$tend

  case $cal in
  *.grego) cmode=3;;
  *.365)   cmode=2;;
  *) echo "Unknown test mode $cal" >&2; exit 1;;
  esac

  chk_plan ${tbgn} ${tend}
  for t in $(seq $tbgn $tend)
  do
    if test $t -lt $tstt -o $t -gt $tstp; then
      echo "ok $t # SKIP"
      continue
    fi
    log=$logd/x$cal.t$t
    case $t in
    1) dstep=86000;;
    2) dstep=-86000;;
    3) dstep=1468500;;
    4) dstep=-1468500;;
    *) echo "Unknown test number $t">&2; exit 1;;
    esac
    echo " &NMTEST CMODE=$cmode, DSTEP=$dstep, &END" > $sysin
    time $cmd < "$sysin" > "$log" 2>&1

    err=$(sed -n -e '/^ *invalid count = */s///p' $log)
    test x"$err" = x && err=-1
    if test $err -eq 0; then
      echo "ok $t - $cmode $dstep"
    else
      echo "not ok $t - ($err) $cmode $dstep"
    fi
  done
  return 0
}

# ---------------------------------------- ils
chk_ils ()
{
  err=0
  cmd=$xils
  chk_cmds $cmd || return $?

  test -x ./$cmd && cmd=./$cmd

  tbgn=1 tend=3

  test $tstt -eq 0 && tstt=$tbgn
  test $tstp -eq 0 && tstp=$tend

  case $cal in
  *.grego)  cmode=3;;
  *.noleap) cmode=2;;
  *.30360)  cmode=1;;
  *) echo "Unknown test mode $cal" >&2; exit 1;;
  esac

  chk_plan ${tbgn} ${tend}
  for t in $(seq $tbgn $tend)
  do
    if test $t -lt $tstt -o $t -gt $tstp; then
      echo "ok $t # SKIP"
      continue
    fi
    log=$logd/x$cal.t$t
    echo " &NMTEST CMODE=$cmode, KTEST=$t, &END" > $sysin
    time $cmd < "$sysin" > "$log" 2>&1

    err=$(sed -n -e '/^ *invalid count = */s///p' $log)
    test x"$err" = x && err=99
    if test "$err" -eq 0; then
      echo "ok $t - $cmode $dstep"
    else
      echo "not ok $t - ($err) $cmode $dstep"
    fi
  done
  return 0
}

# ---------------------------------------- dispatcher

for cal in $@
do
  cal=$(basename "$cal")
  case $cal in
  matsiro.*) chk_matsiro || exit $?;;
  ils.*) chk_ils || exit $?;;
  auto*|grego_i*|grego_l*|ideal*) chk_miroc || exit $?;;
  *) echo "$this: Aborts. Unknown test $cal." >&2; exit 1;;
  esac
done

eval "$do_exit"
exit $?
