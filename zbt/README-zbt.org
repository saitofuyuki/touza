#+title: TOUZA/Zbt guide
#+author: SAITO Fuyuki
#+date: <2024-07-249>
#+email: saitofuyuki AT jamstec DOT go DOT jp

* Introduction
*TOUZA/Zbt* (zbt is pronounced as /za-bu-ton/) is a collection of
python interface on *TOUZA* libraries, in particular, GTOOL3 (or
TOUZA/Nio) format accesses.

*TOUZA/Zbt* is maintained by SAITO Fuyuki <saitofuyuki AT jamstec
DOT go DOT jp>.

*TOUZA (楊座)*, MIROC base infrastructure, is a collection of
FORTRAN procedures mainly adopted in MIROC.  See *TOUZA* README
(expected to be in the parent directory) for general instruction of
*TOUZA* collection.

* Installation
Installation of python resources using ~make install~ is disabled by
default.  Rather, it is recommended to install them with ~pip~.

** Installation with pip
The module ~zbt~ depends on the shared library (e.g., ~libtouza.so~),
thus before the installation of ~zbt~, a standard sequence of
~configure~ - ~make~ - ~~make install~ is required.
You must configure with =--enable-shared= argument.

: % cd touza-x.y.z
: % ./configure --enable-shared --prefix=PREFIX --with-build-jmz --enable-nctcdf
: % make
: % make install
: % ls -F PREFIX/lib
: libtouza.a libtouza.la libtouza.so@ libtouza.so.0@ libtouza.so.0.0.0 pkgconfig/

After the normal sequence, a wheel file can be generated by ~make
python-build~ under =zbt= directory:

: % cd zbt
: % make python-build   ## need to be on line due to pip requirement
: % ls dist
: touza_zbt-1.13.0-py3-none-any.whl  touza_zbt-1.13.0.tar.gz
: % . SOMEWHERE/bin/activate # switch to virtual env
: (python3) % python3 -m pip install dist/touza_zbt-1.13.0-py3-none-any.whl

** Installation with normal configure/make
If you prefer, zbt can be installed by normal ~make install~.
This feature is enabled at ~configure~ time using
=--enable-sub-zbt=yes= argument:

: % cd touza-x.y.z
: % ./configure --enable-shared --prefix=PREFIX --with-build-jmz --enable-nctcdf \
: %             --enable-sub-zbt=yes
: % make
: % make install
: % ls -F PREFIX/lib/python*/site-packages/zbt
: __init__.py  __pycache__/  config.py ....
: % ls -F PREFIX/bin
: ...  zbcont*

** TOUZA Library location
The shared library path is hard-coded in =zbt/zbt/env.py=, which is
automatically generated during make.
When loading of the shared library fails, try one of the following
for manual configuration:

- add the library directory to environment variable =LD_LIBRARY_PATH=
  during execution
- add the library path environment variable =TOUZA_LIBRARY=
  during execution.  The value can be either a file name or a directory.
  For the latter case, ~libtouza.so~ is appended automatically.
- Pass the library path at ~LibTouzaNio~ object construction
  : lib = LibTouzaNio(name='..../lib/libtouza.so')
- (*Deprecated*) pass =--enable-zbt-embed-libdir= argument at
  =configure=.  The library location is hard-coded according to
  =TOUZA= library installation.

Also, you may need to configure =PYTHONPATH= as appropriate.

* Quick start guide
** A simple example (2d plot of a GTOOL3 file)
A typical variable file is prepared for demonstration:
: % ngtls T2
:    1 T2        8332296H 74400   UR4 09570626 120000 GLON128,GGLA64,SFC1
:    2 T2        8333004H 67776   UR4 09570725 120000 GLON128,GGLA64,SFC1
:    3 T2        8333712H 74400   UR4 09570826 000000 GLON128,GGLA64,SFC1
:    4 T2        8334444H 72000   UR4 09570926 000000 GLON128,GGLA64,SFC1
:    5 T2        8335176H 74400   UR4 09571026 120000 GLON128,GGLA64,SFC1
:    6 T2        8335908H 72000   UR4 09571126 120000 GLON128,GGLA64,SFC1
:    7 T2        8336640H 74400   UR4 09571227 000000 GLON128,GGLA64,SFC1
:    8 T2        8337384H 74400   UR4 09580127 120000 GLON128,GGLA64,SFC1
:    9 T2        8338116H 72000   UR4 09580227 120000 GLON128,GGLA64,SFC1
:   10 T2        8338848H 74400   UR4 09580328 000000 GLON128,GGLA64,SFC1
:   11 T2        8339580H 72000   UR4 09580428 000000 GLON128,GGLA64,SFC1
:   12 T2        8340312H 74400   UR4 09580528 120000 GLON128,GGLA64,SFC1
*** Preparation
Set environment variables ~GTAX_PATH~ if you need GTOOL axis files to
access.
: export GTAX_PATH=.:/SOMEWHERE/gtool/lib/gt3
*** To begin
: >>> import xarray as xr

If installation succeeded, =zbt= backend is appended in the xarray engines:
: >>> xr.backends.list_engines()
: :
: 'zbt': <xrNioBackendEntrypoint>
:   Use TOUZA/Nio(gtool-3.5 extension) files in Xarray
:   Learn more at https://github.com/saitofuyuki/touza}

For some reason, registration of ~zbt~ may be failed.
In this case try below workaround and
use =zbt.xrnio.open_dataset()= instead of =xarray.open_dataset()=
for dataset creation (explained soon).
: >>> import zbt.xrnio as zxr

*** Create ~xarray.Dataset~ object with GTOOL3 file
: >>> xds = xr.open_dataset("T2")         # a file-name argument
: >>> ##  xds = zxr.open_dataset("T2")    # when zbt engine do not appears
: >>> xds
: <xarray.Dataset> Size: 394kB
: Dimensions:  (record: 12, SFC1: 1, GGLA64: 64, GLON128: 128)
: Coordinates:
:   * GLON128  (GLON128) float32 512B 0.0 2.812 5.625 8.438 ... 351.6 354.4 357.2
:   * GGLA64   (GGLA64) float32 256B 87.86 85.1 82.31 ... -82.31 -85.1 -87.86
:   * record   (record) int32 48B 8332296 8333004 8333712 ... 8339580 8340312
: Dimensions without coordinates: SFC1
: Data variables:
:     T2       (record, SFC1, GGLA64, GLON128) float32 393kB ...

The GTOOL3 file is analyzed into a netCDF-like structure.  In this
case, 12 records are interpreted as time-slices of one 3-dimension
variable, creating a 4-dimension variable of shape =(12,1,64,128)=.
Dimensions which the module can find the corresponding GTOOL3 axis
file (in this case, =GTAXLOC.GLON128= and =GTAXLOC.GGLA64=) are
automatically converted into ~xarray~ coordinates.  You may need valid
=GTAX_PATH= environment to find the axis files.
*** Dataset attributes
You can examine =dims=, =coords=, =data_vars= attributes of the
=Dataset= object.
: >>> xds.dims
: FrozenMappingWarningOnValuesAccess({'record': 12, 'SFC1': 1, 'GGLA64': 64, 'GLON128': 128})
: >>> xds.coords
: Coordinates:
:   * GLON128  (GLON128) float32 512B 0.0 2.812 5.625 8.438 ... 351.6 354.4 357.2
:   * GGLA64   (GGLA64) float32 256B 87.86 85.1 82.31 ... -82.31 -85.1 -87.86
:   * record   (record) int32 48B 8332296 8333004 8333712 ... 8339580 8340312
: >>> xds.data_vars
: Data variables:
:     T2       (record, SFC1, GGLA64, GLON128) float32 393kB ...
*** DataArray objects
Use dictionary or dot indexing to pull out Dataset variables as
DataArray objects.

: >>> v = xds['T2']
: >>> ## v = xds.data_vars['T2']
: >>> v
: <xarray.xrNioDataArray 'T2' (record: 12, SFC1: 1, GGLA64: 64, GLON128: 128)> Size: 393kB
: [98304 values with dtype=float32]
: Coordinates:
:   * GLON128  (GLON128) float32 512B 0.0 2.812 5.625 8.438 ... 351.6 354.4 357.2
:   * GGLA64   (GGLA64) float32 256B 87.86 85.1 82.31 ... -82.31 -85.1 -87.86
:   * record   (record) int32 48B 8332296 8333004 8333712 ... 8339580 8340312
: Dimensions without coordinates: SFC1
: Attributes: (12/67)
:     _nio_recdim:  record
:     units:        K
:     long_name:    2m temperature
:     IDFM:                     9010
:     :
:     CDATE:        ('20181205 190817', '20181205 190922', '20181205 191033', '...
:     :

Attributes are defined according to the GTOOL3 file headers.
Three special attributes are defined: =units=, =long_name=, and
=_nio_recdim=.  The first two attributes are used in ~xarray~ and the
last one is used in ~zbt.xrnio~ internally.
Attributes of GTOOL3 headers from all the corresponding records are
collected.  Unique values are defined as single one, otherwise as
tuple.

*** Slicing and indexing
Slicing and indexing can be examined:
: >>> sel = v[1]
: >>> sel
: <xarray.xrNioDataArray 'T2' (SFC1: 1, GGLA64: 64, GLON128: 128)> Size: 33kB
: [8192 values with dtype=float32]
: Coordinates:
:   * GLON128  (GLON128) float32 512B 0.0 2.812 5.625 8.438 ... 351.6 354.4 357.2
:   * GGLA64   (GGLA64) float32 256B 87.86 85.1 82.31 ... -82.31 -85.1 -87.86
:     record   int32 4B 8333004
: Dimensions without coordinates: SFC1
: Attributes: (12/67)
:     _nio_recdim:  record
:     units:        K
:     long_name:    2m temperature
:     IDFM:                     9010
:     :
:     CDATE:        20181205 190922
:     :
: <xarray.DataArray 'T2' (GGLA64: 64, GLON128: 128)> Size: 33kB
: [8192 values with dtype=float32]
: Coordinates:
:   * GLON128  (GLON128) float32 512B 0.0 2.812 5.625 8.438 ... 351.6 354.4 357.2
:   * GGLA64   (GGLA64) float32 256B 87.86 85.1 82.31 ... -82.31 -85.1 -87.86
: >>> sel.shape
: (1, 64, 128)
Slice with step does not work, which is reserved for a future development.

Note that the attributes are also sliced according to record
coordinate (see =CDATA= attributes in above two examples).

The Ellipsis literal (=...=) can be used for slicing (only once),
which is regarded as full spanning over all the omitted dimensions.
Also, missing slicing, less than the ranks of data shape, are regard
as full spanning after final specification.  Thus all the slicing
below are identical:
: >>> v[0].shape
: (1,64,128)
: >>> v[0,:].shape
: (1,64,128)
: >>> v[0,:,:,:].shape
: (1,64,128)
: >>> v[0,...].shape
: (1,64,128)
: >>> v[0,...,:].shape
: (1,64,128)

Slicing (except for striding) follows NumPy method, where integer =i=
slicing is different with =i:i+1=:

: >>> v[0].shape
: (1, 64, 128)          # first dimension is deleted
: >>> v[0:1].shape
: (1, 1, 64, 128)       # first dimension survives

*** Simple plotting using ~xarray~ and ~matplotlib~
~zbt.xrnio~ only provides the backend for GTOOL3 (TOUZA/Nio) format
files.  Therefore, all (or most of) the ~xarray~ methods should work.
: >>> import matplotlib.pyplot as plt
: :
: >>> sel = v[0]
: >>> fig, ax = plt.subplots()
: >>> sel.plot(ax=ax)
: <matplotlib.collections.QuadMesh at 0x7fbc7db6ff80>
: >>> plt.show()

See https://docs.xarray.dev/ for ~xarray~ reference.

* Description of TOUZA/Zbt commands
** ~zbcont~ - a sample command of contour plot
*** help
: zbcont [OPTIONS...] FILE [FILE...]

Usage is shown by =zbcont --help=:

: usage: zbcont [-h] [--verbose] [--quiet] [--debug] [--no-decode_coords] [-c SPEC]
:               [-C SPEC] [-M METHOD/CMAP] [-r [LOW][:[HIGH]]]
:               [-d DIM,[[LOW]:[HIGH]]] [-v VAR[,VAR...]] [-x VERTICAL[,HORIZONTAL]]
:               [-o FILE] [-i] [-m MAP-SPECS] [-p PROJECTION]
:               [FILE[/SPEC] ...]
:
: positional arguments:
:   FILE[/SPEC]           files, possibly with specifiers
:
: options:
:   -h, --help            show this help message and exit
:   --verbose             Be verbose
:   --quiet, --silent     Be quiet
:   --debug               show debug information
:   --no-decode_coords    skip auto coordinate inclusion
:   -c SPEC, --contours SPEC, --contour SPEC
:                         contour intervals or levels specification
:   -C SPEC, --colors SPEC, --color SPEC
:                         color intervals or levels specification.
:   -M METHOD/CMAP, --color-method METHOD/CMAP
:                         coloring method and map {contour(c) contourf(f)
:                         pcolormesh(p)}
:   -r [LOW][:[HIGH]], --range [LOW][:[HIGH]]
:                         data range to draw
:   -d DIM,[[LOW]:[HIGH]], --dim DIM,[[LOW]:[HIGH]]
:                         coordinate clipping
:   -v VAR[,VAR...], --variable VAR[,VAR...]
:                         variable filter
:   -x VERTICAL[,HORIZONTAL], --coordinate VERTICAL[,HORIZONTAL]
:                         figure coordinates
:   -o FILE, --output FILE
:                         output filename
:   -i, --interactive     interactive mode
:   -m MAP-SPECS, --map MAP-SPECS
:                         map overlay
:   -p PROJECTION, --projection PROJECTION
:                         map projection
:
: contour spec
:  * contour specification
:    INTERVAL[/....]      contour intervals (e.g., -C10/20)
:    LEVEL,[...]          explicit contour levels (e.g., -C133,)
:    NUMBER:[STEP]        number of contour levels (e.g., -C16:)
:
:  * color specification
:    INTERVAL
:    LEVEL,[...]
:    NUMBER:
*** simple usage
Try =zbcont= with GTOOL3 format file(s) as command-line parameter:

: % zbcont T2
: (1) 0:T2 <0:T2> [0,0,:,:]
: >

One window is opened to plot the contour of some 2d slice of input
file(s).

The following keys works by default when the focus is on the plot
window:

- =q= :: quit
- =Q= :: quit all
- =D= :: duplicate the figure
- =N= :: new figure
- space :: next slice
- backspace :: previous slice
- right :: next slice within the variable
- left :: previous slice within the variable
- =v= :: next variable
- =V= :: next variable within file
- =f= :: next file
- =:= :: transpose figure coordinates
- =]= :: next coordinate permutation
- =[= :: previous coordinate permutation
- =+= :: enlarge the figure geometry
- =-= :: shrink the figure geometry
- === :: reset the figure geometry
- =m= :: toggle mark the figure window
- =U= :: unmark all
- =M= :: toggle all the marks
- =p= :: save the figure image (need output specification at
  command-line argument)

Some keys work on multiple marked figures at once.

*** contour line options
: --contours INTERVAL[/INTERVAL[/...]]
Draw contours with INTERVAL interval.
With multiple intervals (joined with =/= separator),
each contour is drawn with different pen width.

: --contours LEVEL,[LEVEL[,...]]
Draw contours with specific levels.  The separator comma is mandatory
even when a single level is specified, otherwise it is interpreted as
INTERVAL as explained above.

: --contours NUMBER:[STEP]
Draw contours with NUMBER levels.
The separator colon is mandatory.

*** fill-color options
: --colors INTERVAL
Fill color with INTERVAL interval.

: --colors LEVEL,[LEVEL[,...]]
Fill color with specific levels.  The separator comma is mandatory.

: --colors NUMBER:[STEP]
Fill color with NUMBER levels.
The separator colon is mandatory.

*** fill-color methods
: --color-method=METHOD[/]
: --color-method=[/]MAP
: --color-method=METHOD/MAP

Apply METHOD function for the color plot.  Default is ~contourf~.

Possible methods are contour, contourf, pcolormesh,
which can be abbreviated as c, f, p, respectively.

If method is not detected, it is interpreted as MAP.

Colormap is specified with MAP (default is viridis).

*** range clipping
:  --range [LOW][:[HIGH]]
The value smaller than low or greater than HIGH is ignored to plot.

*** dimension clipping
:  --dim DIM,[LOW][:[HIGH]]
Clip along dimension DIM with the index range of LOW:HIGH.
DIM should be a coordinate name or index.

: % zbcont --dim  record,10:20   # limit the record dimension as 10:20
: % zbcont --dim  0,10:20        # limit the first dimension as 10:20
: % zbcont --dim=-1,10:20        # limit the last dimension as 10:20
:                                # Need = separator when the index is negative

*** variable filter
:  --variable VAR[,....]
Only draw VAR.
*** figure coordinate
:  --coordinate [VERTICAL][,[HORIZONTAL]]

: % zbcont --coordinate record    # change the vertical coordinate as record
: % zbcont --coordinate ,record   # change the horizontal coordinate as record
: % zbcont --coordinate 0,-1      # change the vertical and horizontal coordinate
:                                 # as the first and the last, respectively
*** map overlay (experimental)
: % zbcont -m LETTERS
: % zbcont -m FEATURE[,FEATURE...]
| letter | string | feature                               |
|--------+--------+---------------------------------------|
| c      | coast  | add coastline                         |
| o      | ocean  | fill ocean                            |
| l      | land   | fill land                             |
| b      | border | add borders                           |
| r      | river  | add rivers                            |
| L      | lake   | add lakes                             |
| -      | (null) | dummy, to activate carotpy projection |
**** examples
: % zbcont -m c  FILE            # add coastline
: % zbcont -m ol FILE            # fill ocean and land
: % zbcont -m river,lake FILE    # add rivers and lakes
*** projection (experimental)
: % zbcont -p PROJECTION[+LON[+LAT[+HEIGHT]]]
| string                 | projection          | parameters                          |
|------------------------+---------------------+-------------------------------------|
| m mercator             | Mercator            | central longitude                   |
| w mo mollweide         | Mollweide           | central longitude                   |
| nps northpolarstereo   | NorthPolarStereo    | central longitude                   |
| sps southpolarstereo   | SouthPolarStereo    | central longitude                   |
| np nearsideperspective | NearsidePerspective | central longitude, latitude, height |
| g orthographic         | Orthographic        | central longitude, latitude         |
| h hammer               | Hammer              | central longitude                   |
| pc platecarree         | PlateCarree         | central longitude                   |

**** examples
: % zbcont -ppc+135 FILE    # central longitude on 135E.

*** output
: --output FILENAME

If the slices are more than one, only pdf output works.

Specification of output argument switch the =zbcont= execution to
batch (non-interactive) mode.

If you want manually select the slice to save, run =zbcont= with
interactive mode:

: % zbcont --output hoge.pdf --interactive

In this case, the selected figures (by key =p=) are saved in the output.

*** customization
Customization can be performed with =zbtrc.toml=.

* Description of TOUZA/Zbt package
** ~zbt.libtouza~ - low-level interface on TOUZA(/Nio) library
*** Requirement
A shared library of TOUZA (version 1.13 or later) must be
installed somewhere the module can find.
If you encounter something like following message, it means that the
module fails to find the library.
: Cannot load touza library.  Setting TOUZA_LIB environment may help.
: Traceback (most recent call last):
: :
: :
: AttributeError: /usr/.....so: undefined symbol: _touza

In this case, you must define the environment variable =TOUZA_LIBRARY=
to define the path to the library.
: export TOUZA_LIBRARY=/SOMEWHERE/lib/libtouza.so
** ~zbt.dsnio~ - TOUZA/Nio dataset module, to emulate ~netcdf4-python~
This is minimum emulation of Dataset class in netcdf4-python for
GTOOL3 (TOUZA/Nio) format file, based on ~zbt.libtouza~ module.
*** Usage
*** Limitation (some are reserved to be improved )
- Only file reading is implemented (file writing is reserved for
  future development).
- Only c-style array indexing is implemented.  It means that the time
  series of a 3 dimension variable is represented as =V[0:NT, 0:NZ,
  0:NY, 0:NX]=.
- Due to much freedom originating from the GTOOL3 format policy,
  automatic conversion to a dataset might be different from what the
  user expects.
- For a compromise of simple transformation from GTOOL3 format file to
  something like netCDF4, all the variables share the record
  dimension among a group generated by ~TouzaNioDataset~ class,
  except for root (suite) class.
- Slice accesses of array at file reading are partially implemented:
  Any step except for 1 does not work correctly.
  This limitation is only at file read, thus, the following works,
  : ds = TouzaNioDataset('gtool-file.dat')
  : v = ds['var'][2:5]  # read file and set v slice without step
  : print(v[::2] )      # slicing with step
  while the following not,
  : ds = TouzaNioDataset('gtool-file.dat')
  : v = ds['var']     # file reading is not performed
  : print(v[2:5:2] )  # read file and set v slice, which will fail.
- =TouzaNioCoDataset= class does not parse time coordinate.

** ~zbt.xrnio~ - ~xarray~ backends of zbt.dsnio module

** ~zbt.plot~ - Plot and layout methods
** ~zbt.control~ - Iteration control on xarray-like data structure
* Acknowledgements
* Copyright and license
Copyright 2024 Japan Agency for Marine-Earth Science and Technology
Licensed under the Apache License, Version 2.0
  (https://www.apache.org/licenses/LICENSE-2.0)

#  LocalWords:  TOUZA Zbt SAITO Fuyuki saitofuyuki jamstec jp zbt Nio
#  LocalWords:  libtouza touza Traceback AttributeError dsnio netcdf
#  LocalWords:  GTOOL NX netCDF TouzaNioDataset ds gtool dat xrnio xr
#  LocalWords:  TouzaNioCoDataset xarray backends GTAX ngtls GLON SFC
#  LocalWords:  GGLA matplotlib pyplot plt xds kB GTAXLOC coords sel
#  LocalWords:  FrozenMappingWarningOnValuesAccess DataArray dtype cd
#  LocalWords:  fbc jmz nctcdf pkgconfig env LD LibTouzaNio zbcont py
#  LocalWords:  PYTHONPATH ctrl contourf pcolormesh imshow CMAP MIROC
#  LocalWords:  Colormap viridis README init pycache config backend
#  LocalWords:  xrNioBackendEntrypoint zxr xrNioDataArray nio recdim
#  LocalWords:  IDFM CDATE CDATA NumPy unmark pdf hoge zbtrc toml
