#!/usr/bin/zsh -f
# Time-stamp: <2023/06/20 15:30:22 fuyuki demo-chak.sh.in>

main ()
{
  local demod=demo
  local chak=./chak
  local ngted=ngted
  local ngtls=ngtls
  local ngtmean=ngtmean
  local ngtconv=ngtconv

  local DEMO=()
  set_demo_filter DEMO "$@" || return $?
  demo_inputs $demod || return $?
  demo_tutorial || return $?
  demo_operation || return $?
  return 0
}

demo_tutorial ()
{
  local src=(demo/base)
  run_demo tutorial:index0/p -E -C "default, count from 0" --      $src POP
  run_demo tutorial:index0/f -E -C "count from 1"          --   -F $src POP

  run_demo tutorial:index1/p -E -C "default, count from 0" --   -n    $src =
  run_demo tutorial:index1/f -E -C "count from 1"          --   -n -F $src =

  src=demo/single
  local opr=($src DUP 1 ADD FLUSH -i)
  run_demo tutorial:quiet/0 -E -TRIM 5 --  $opr
  run_demo tutorial:quiet/1 -TRIM 5 --  -q $opr
  run_demo tutorial:quiet/2 -TRIM 5 --  -qq $opr
  run_demo tutorial:quiet/3 -TRIM 5 --  -qqq $opr
  run_demo tutorial:quiet/4 -TRIM 5 --  -qqqq $opr
  run_demo tutorial:quiet/5 -TRIM 5 --  -qqqqq $opr

  return 0
}

demo_operation ()
{
  # run_demo demo/base POP
  # run_demo -F demo/base POP
  # run_demo demo/base FLUSH
  # run_demo -F demo/base FLUSH
  local src=(demo/yz.base INT)

  run_demo source:1d T=3 $src        =
  run_demo sub/P     T=3 $src X=2:5  =
  run_demo sub/F -F  T=4 $src X=3:5  =
  run_demo ext       T=3 $src X=6:10 =

  src=(T=3 demo/x.base INT)
  run_demo source:2d $src                 =
  run_demo perm:2d/c   $src X=lev         =
  run_demo perm:3d+1/c $src Z=lat         =
  run_demo perm:3d+0/c $src Y=lat Z=lev   =
  run_demo perm:2d/o   $src PERM=lev      =
  run_demo perm:3d+1/o $src PERM=,,lat    =
  run_demo perm:3d+0/o $src PERM=,lat,lev =

  run_demo_add add:1d    demo/yz.base T=3 demo/sub3.yz.base T=3
  run_demo_add add:1d    demo/zx.base T=3 demo/sub2.zx.base T=5
  run_demo_add add:2d+1d demo/z.base  T=3 demo/sub2.zx.base T=0

  run_demo_add fail/add:2d    demo/zx.base T=3       demo/yz.base  T=3
  run_demo_add auto/add:2d    demo/zx.base T=5       demo/yz.base  T=3
  run_demo_add manual/add:2d  demo/zx.base T=3 Y=lat demo/yz.base  T=3

  src=(demo/sub5.yz.base INT demo/sub3.yz.base INT)
  run_demo compromise:source   -NOCOL    T=3 $src FLUSH
  run_demo compromise:source/F -NOCOL -F T=4 $src FLUSH
  run_demo compromise:i                  T=3 $src FLUSH -i
  run_demo compromise:x                  T=3 $src FLUSH -x
  run_demo compromise:l                  T=3 $src FLUSH -l

  # permutation
  src=(T=0 demo/base INT)
  run_demo source:3d     -n $src =

  run_demo perm:3d/102a  -n $src PERM=lat  =
  run_demo perm:3d/102b  -n $src PERM=,lon =

  run_demo perm:3d/201   -n $src PERM=lev =
  run_demo perm:3d/210a  -n $src PERM=lev,lat =
  run_demo perm:3d/210b  -n $src PERM=lev,/   =

  run_demo perm:3d/.012        -n $src PERM=+       =
  run_demo perm:3d/s012        -n $src PERM=set     =
  run_demo perm:3d/0s12        -n $src PERM=,set    =
  run_demo perm:3d/012s        -n $src PERM=,,,set  =
  run_demo perm:3d/s012:error  -n $src PERM=set/    =

  run_demo perm:3d/r2          -n $src PERM=lon/glon   =
  run_demo perm:3d/r2          -n $src PERM=,,lon/glon =
  run_demo perm:3d/r2          -n $src PERM=,,lon/lat  =

  src=(T=5 demo/zx.base INT)
  run_demo source:y      -n $src =
  run_demo perm:y+x      -n $src PERM=lon =
  run_demo perm:y+s      -n $src PERM=+ =
  run_demo perm:y+sx     -n $src PERM=lon,+ =
  run_demo perm:y+y      -n $src PERM=,set =
  run_demo perm:y+sy     -n $src PERM=+,set =
  run_demo perm:y+z      -n $src PERM=,,lev =
  run_demo perm:y+z:keep -n $src PERM=/,/,lev =

  # flat index
  src=(T=0 demo/base INT)

  run_demo flat:flat/s   -TRIM 3:3   $src FLAT         = POP
  run_demo flat:flat/s0  -TRIM 9     $src FLAT=0       = POP
  run_demo flat:flat/s1  -TRIM 9     $src FLAT=1       = POP
  run_demo flat:flat/s01 -TRIM 3:3   $src FLAT=0,1     = POP
  run_demo flat:flat/s10 -TRIM 9     $src FLAT=1,0     = POP
  run_demo flat:flat/s02 -TRIM 9     $src FLAT=0,2     = POP
  run_demo flat:flat/s20 -TRIM 9     $src FLAT=2,0     = POP

  run_demo flat:flat     -TRIM 3:3   $src FLAT         FLUSH -i
  run_demo flat:flat/0   -TRIM 9     $src FLAT=0       FLUSH -i
  run_demo flat:flat/1   -TRIM 9     $src FLAT=1       FLUSH -i
  run_demo flat:flat/01  -TRIM 3:3   $src FLAT=0,1     FLUSH -i
  run_demo flat:flat/10  -TRIM 9     $src FLAT=1,0     FLUSH -i
  run_demo flat:flat/02  -TRIM 3:3   $src FLAT=0,2     FLUSH -i
  run_demo flat:flat/20  -TRIM 3:3   $src FLAT=2,0     FLUSH -i
  run_demo flat:flat/x   -TRIM 9     $src FLAT=lon     FLUSH -i
  run_demo flat:flat/zy  -TRIM 9     $src FLAT=lev,lat FLUSH -i

  run_demo flat:flat/0+1 -TRIM 9     $src FLAT=0 FLAT=1 FLUSH -i

  # shift
  src=(T=0 demo/base INT DUP)
  run_demo shift:0+1 -TRIM 18 $src C0=::+1 FLUSH -i
  run_demo shift:0-1 -TRIM 18 $src C0=::-1 FLUSH -i
  run_demo shift:1+1 -TRIM 10:10 $src C1=::+1 FLUSH -i
  run_demo shift:1-1 -TRIM 10:10 $src C1=::-1 FLUSH -i
  run_demo shift:2+1 -TRIM 10:10 $src C2=::+1 FLUSH -i
  run_demo shift:2-1 -TRIM 10:10 $src C2=::-1 FLUSH -i

  run_demo shift:0+1a -TRIM 18 $src SHIFT=+1 FLUSH -i
  run_demo shift:0-1a -TRIM 18 $src SHIFT=-1 FLUSH -i
  run_demo shift:1+1a -TRIM 10:10 $src SHIFT=,+1 FLUSH -i
  run_demo shift:1-1a -TRIM 10:10 $src SHIFT=,-1 FLUSH -i

  run_demo shift:part/0+1 -TRIM 18 $src C0=1:4:+1 FLUSH -i
  run_demo shift:part/0-1 -TRIM 18 $src C0=1:4:-1 FLUSH -i

  local w=8
  run_demo cshift:0+1 -TRIM 18 $src C0=::+1:$w FLUSH -i
  run_demo cshift:0-1 -TRIM 18 $src C0=::-1:$w FLUSH -i
  run_demo cshiftP:0+1 -TRIM 18 $src C0=::+1:$((w+1)) FLUSH -i
  run_demo cshiftP:0-1 -TRIM 18 $src C0=::-1:$((w+1)) FLUSH -i
  run_demo cshiftM:0+1 -TRIM 18 $src C0=::+1:$((w-1)) FLUSH -i
  run_demo cshiftM:0-1 -TRIM 18 $src C0=::-1:$((w-1)) FLUSH -i

  # count
  src=(demo/flat)
  run_demo count:all $src COUNT   =
  run_demo count:0   -TRIM 10 $src COUNT=0 =
  run_demo count:1   -TRIM 10 $src COUNT=1 =
  run_demo count:2   -TRIM 10 $src COUNT=2 =
  run_demo count:0/p -TRIM 10 $src COUNT=0/2:6 =

  run_demo count:0p  -TRIM 10 $src COUNT=2:6 =
  run_demo count:yb  -TRIM 10 $src COUNT=,: =
  run_demo count:ya  -TRIM 10 $src COUNT=,1 =
  run_demo count:20  -TRIM 10 $src COUNT=2,0 =

  return 0
}

run_demo_add ()
{
  local tag=$1; shift
  local op0=($1); shift
  while [[ $# -gt 0 ]]
  do
    [[ -e $1 ]] && break
    op0+=($1)
    shift
  done
  local op1=("$@")
  run_demo "$tag/op0" $op0 INT FLUSH
  run_demo "$tag/op1" $op1 INT FLUSH
  run_demo "$tag" $op0 INT $op1 INT REPEAT ADD FLUSH -i
}
run_demo ()
{
  local tag=$1; shift
  local col=T trim= edup=
  local hcom=
  while [[ $# -gt 0 ]]
  do
    case $1 in
    (-NOCOL) col=;;
    (-TRIM)  trim=$2; shift;;
    (-E)     edup=T;;
    (-C)     hcom="$2"; shift;;
    (--)     shift; break;;
    (*) break;;
    esac
    shift
  done
  if [[ -z $DEMO ]]; then
    :
  else
    local d= match=
    for d in "${(@)DEMO}"
    do
      [[ $tag =~ "$d" ]] && match=T && break
    done
    [[ -z $match ]] && return 0
  fi

  local err=
  local args=("$@")
  local tmp=$(mktemp) tmp2=$(mktemp) tmp3=$(mktemp) log=$(mktemp)
  if [[ -n $edup ]]; then
    $chak --demo "${(@)args}" > $tmp 2>&1; err=$?
  else
    $chak        "${(@)args}" > $tmp 2> $log; err=$?
  fi
  [[ -n $trim ]] && trim=(${(s/:/)trim})
  # print - "--- tmp"
  # cat $tmp
  # print - "--- log"
  # cat $log
  # print - "---"
  print "# ## $tag"
  {
    print -n - "% $chak:t $args"
    [[ -n $hcom ]] && print -n - "   # $hcom"
    print -
    if [[ $err -eq 0 ]]; then
      sed -e  '/^ \?-\?[0-9]/,$d' $tmp
      sed -ne '/^ \?-\?[0-9]/,$p' $tmp > $tmp2
      if [[ $#trim -eq 1 ]]; then
        head --lines=$trim $tmp2 > $tmp3
        print - ":" >> $tmp3
        mv $tmp3 $tmp2
      elif [[ $#trim -eq 2 ]]; then
        head --lines=$trim[1] $tmp2 > $tmp3
        print - ":" >> $tmp3
        tail --lines=$trim[2] $tmp2 >> $tmp3
        mv $tmp3 $tmp2
      fi
      if [[ -z $col ]]; then
        cat $tmp2
      else
        column -t $tmp2
      fi
    else
      cat $tmp
      cat $log
    fi
  } | sed -e 's/^/: /'
  print "# ##DONE $tag"
  print
  rm -f $tmp $tmp2 $tmp3 $log
}

demo_inputs ()
{
  local outd=$1
  local nx=8 ny=4 nz=3 nt=3
  [[ -z $outd ]] && outd=.
  mkdir -p $outd || return $?
  local single=$outd/single
  gen_source input $single 1 :$nx :$ny :$nz || return $?

  local base=$outd/base
  gen_source bs $base $nt :$nx :$ny :$nz || return $?

  gen_mean -mX x:bs $outd/x.base $base || return $?
  gen_mean -mY y:bs $outd/y.base $base || return $?
  gen_mean -mZ z:bs $outd/z.base $base || return $?

  gen_mean -mXY xy:bs $outd/xy.base $base || return $?
  gen_mean -mYZ yz:bs $outd/yz.base $base || return $?
  gen_mean -mZX zx:bs $outd/zx.base $base || return $?

  gen_subr subx:bs $outd/sub2.yz.base $outd/yz.base lon 0:2 || return $?
  gen_subr subx:bs $outd/sub5.yz.base $outd/yz.base lon 0:5 || return $?
  gen_subr subx:bs $outd/sub3.yz.base $outd/yz.base lon 4:6 || return $?
  gen_subr subx:bs $outd/sub1.yz.base $outd/yz.base lon 5:5 || return $?

  gen_subr suby:bs $outd/sub2.zx.base $outd/zx.base lat 2:3 || return $?
  gen_subr suby:bs $outd/sub1.zx.base $outd/zx.base lat 1:1 || return $?

  local bool=$outd/bool
  gen_flat bool $bool $nx $((nx-1)) $((nx-2)) || return $?

  return 0
}

gen_source ()
{
  local item=$1 ofile=$2; shift 2
  local nt=$1 nx=$2 ny=$3 nz=$4
  local jt=

  local E=()
  local C=()
  [[ x${nx:--} != x- ]] && C+=(X=$nx) E+=(-e"aitm1:clon")
  [[ x${ny:--} != x- ]] && C+=(Y=$ny) E+=(-e"aitm2:clat")
  [[ x${nz:--} != x- ]] && C+=(Z=$nz) E+=(-e"aitm3:clev")

  local opr=(0 $C X AND Y 10 MUL ADD Z 100 MUL ADD INT)

  local PROPS=(TITLE='demonstration source'
               UNIT='shaku' ITEM="$item")

  $chak -H0 -f $opr = $ofile $PROPS || return $?
  jt=1
  while [[ $jt -lt $nt ]]
  do
    $chak -a -H0 $opr $jt 1000 MUL ADD = $ofile $PROPS || return $?
    let jt++
  done

  jt=0
  local tm=
  while [[ $jt -lt $nt ]]
  do
    tm="$(printf '%02d' $jt)0000"
    $ngted -t $((jt+1)) \
           -e "dset:ctouza-jmz" \
           -e "time:c$((jt+100))" \
           -e "date:c19730130 $tm" $E $ofile
    let jt++
  done

  return 0
}

gen_flat ()
{
  local item=$1 ofile=$2; shift 2
  local nx=$1 ny=$2 nz=$3

  local C=()
  [[ x${nx:--} != x- ]] && C+=(X=lon/:$nx)
  [[ x${ny:--} != x- ]] && C+=(Y=lat/:$ny)
  [[ x${nz:--} != x- ]] && C+=(Z=lev/:$nz)

  local opr=(0 $C FLAT ADD X Y GEF MASK X Z GEF MASK BOOL INT)

  local PROPS=(TITLE='demonstration source'
               UNIT='shaku' ITEM="$item")

  $chak -H0 -f $opr = $ofile $PROPS || return $?

  local jt=1
  tm="$(printf '%02d' $jt)0000"
  $ngted -t $((jt+1)) \
         -e "dset:ctouza-jmz" \
         -e "time:c$((jt+100))" \
         -e "date:c19730130 $tm" $ofile

  return 0
}

gen_mean ()
{
  local mopts=($1); shift
  local item=$1 ofile=$2; shift 2
  local ifile=$1

  local copts=(-t 1)
  $ngtmean $copts $mopts       -o $ofile $ifile || return $?
  $ngtmean $copts $mopts -n -a -o $ofile $ifile || return $?
  $ngtmean $copts $mopts -n -a -o $ofile $ifile || return $?
  $ngtmean $copts $mopts    -a -o $ofile $ifile || return $?
  $ngtmean $copts $mopts -n -a -o $ofile $ifile || return $?
  $ngtmean $copts $mopts -n -a -o $ofile $ifile || return $?

  $ngted -e "item:c$item" $ofile || return $?

  local a= arange= t=
  local j= aopts=()
  for t in 3 6
  do
    arange=($($ngtls -t $t -n $ofile)) || return $?
    j=0
    aopts=()
    for a in ${arange: -3}
    do
      let j++
      [[ $a != 1:1 ]] && continue
      aopts+=(-e"aitm${j}:c")
    done
    $ngted -t $t $aopts $ofile || return $?
  done

  for t in {4..6}
  do
    arange=($($ngtls -t $t -n $ofile)) || return $?
    j=0
    aopts=()
    for a in ${arange: -3}
    do
      let j++
      [[ $a != 1:1 ]] && continue
      aopts+=(-e"astr${j}:c0" -e"aend${j}:c0")
    done
    $ngted -t $t $aopts $ofile || return $?
  done

  # local arange=($($ngtls -t 1 -n $ofile)) || return $?
  # local a= j=

  # local aopts=()
  # local ropts=()
  # for a in ${arange: -3}
  # do
  #   let j++
  #   [[ $a != 1:1 ]] && continue
  #   aopts+=(-e"aitm${j}:c")
  #   ropts+=(-e"astr${j}:c0" -e"aend${j}:c0")
  # done
  # $ngted -t 3,6 $aopts $ofile || return $?
  # $ngted -t 4:6 $ropts $ofile || return $?

  return 0
}

gen_subr ()
{
  local item=$1 ofile=$2; shift 2
  local ifile=$1; shift
  local co=$1 reg=$2
  local mopts=()

  local line= cset= jc=
  local t=0
  while true
  do
    let t++
    line=($($ngtls -t $t $ifile))
    [[ -z $line ]] && break
    cset=("${(@s:,:)line[-1]}")
    jc="$cset[(i)$co]"
    case $jc in
    (1) mopts=(-x $reg);;
    (2) mopts=(-y $reg);;
    (3) mopts=(-z $reg);;
    (*) print -u2 - "panic."; return 1;;
    esac
    [[ $t -gt 1 ]] && mopts+=(-a)
    # print -u2 - "$co $jc ${(@q-)cset}"
    $ngtconv -t $t $mopts $ifile $ofile || return $?
  done
  $ngted -e "item:c$item" $ofile || return $?
  return 0
}

set_demo_filter ()
{
  local _var=$1; shift
  local _r=()
  local d= dd=
  for d in "$@"
  do
    dd=()
    for d in "${(@s/:/)d}"
    do
      if [[ -z $d ]]; then
        dd+=("*")
      else
        dd+=("$d")
      fi
    done
    _r+=("${(j/:/)dd}")
  done
  set -A "$_var" "${(@)_r}"
  return $?
}

main "$@"; err=$?
exit $err
